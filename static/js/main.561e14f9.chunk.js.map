{"version":3,"sources":["components/SandTest1/SandTest1.tsx","layout/MainLayout/MainLayout.tsx","router/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["SandTest1","title","children","useState","inputMsg","setInputMsg","msgs","setMsgs","console","log","params","length","className","defaultScale","options","minScale","maxScale","zoomIn","zoomOut","resetTransform","Fragment","onClick","width","height","join","type","value","placeholder","onChange","e","target","MainLayout","useTranslation","t","useHistory","exact","path","component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oRAqKeA,G,OAzJU,SAAC,GAA+B,EAA7BC,MAA6B,EAAtBC,SAAuB,IAAD,EACxBC,mBAAiB,IADO,mBACjDC,EADiD,KACvCC,EADuC,OAEhCF,mBAAmB,CAAC,qBAAO,qBAAO,iBAFF,mBAEjDG,EAFiD,KAE3CC,EAF2C,KAIxDC,QAAQC,IAAI,sBAEZ,IAQMC,EAAS,CACd,WAAc,CACb,MAAS,CACR,MAAS,WAEV,SAAY,UACZ,OAAU,YACV,KAAQ,SAET,cAAiB,CAChB,OAAU,CACT,QAAW,CACV,QAAU,EACV,KAAQ,QAET,QAAW,CACT,QAAU,EACV,KAAQ,UACR,SAAY,CACb,MAAS,MAIX,MAAS,CACR,QAAW,CACV,SAAY,GACZ,SAAY,GAEb,KAAQ,CACP,SAAY,MAIf,UAAa,CACZ,MAAS,CACR,MAAS,WAEV,OAAU,CACT,QAAW,CACV,QAAU,GAEX,MAAS,KAEV,QAAW,CACV,UAAa,CACZ,MAAS,EACT,aAAgB,KAGlB,MAAS,CACR,QAAW,CACV,KAAQ,CACP,MAAQ,EACR,KAAQ,SACR,MAAS,GACT,MAAUJ,EAAKK,OAAS,EAAKL,EAAO,CAAC,UACrC,OAAU,QAGZ,KAAQ,QAET,KAAQ,CACP,MAAS,GACT,UAAa,CACZ,MAAS,GACT,aAAgB,OAMpB,OACC,yBACCM,UAAU,aAEV,iDACA,yBAAKA,UAAU,cACd,kBAAC,IAAD,CACCC,aAAc,EAGdC,QAAS,CACRC,SAAU,EACVC,SAAU,KAGV,gBAAGC,EAAH,EAAGA,OAAQC,EAAX,EAAWA,QAASC,EAApB,EAAoBA,eAApB,4DACA,kBAAC,IAAMC,SAAP,KACC,yBAAKR,UAAU,SACd,4BAAQS,QAASJ,GAAjB,KACA,4BAAQI,QAASH,GAAjB,KACA,4BAAQG,QAASF,GAAjB,MAED,kBAAC,IAAD,KACC,yBACCP,UAAU,sBAEV,yBACCA,UAAU,oBAEV,kBAAC,IAAD,CACCU,MAAM,SACNC,OAAO,SACPb,OAAQA,YAShB,yBACCE,UAAU,YAEV,qCACKN,EAAKkB,KAAK,OADf,QAGA,yBACCZ,UAAU,kBAEV,2BACCa,KAAK,OACLC,MAAOtB,EACPuB,YAAY,gBACZC,SAAU,SAACC,GAAD,OAAOxB,EAAYwB,EAAEC,OAAOJ,UAEvC,4BACCD,KAAK,SACLJ,QAAS,kBAxIbd,EAAQ,GAAD,mBACHD,GADG,CAENF,UAEDC,EAAY,MAkIT,eCvHU0B,EApBW,WAEXC,cAANC,EACQC,cAChB,OACC,oCACC,yBAAKtB,UAAU,eACd,yBAAKA,UAAU,qBACd,wBAAIA,UAAU,eAAd,SACA,0BAAMA,UAAU,wBACf,kBAAC,EAAD,WChBS,oBACd,kBAAC,IAAD,KACC,kBAAC,IAAD,KACC,kBAAC,IAAD,CAAOuB,OAAK,EAACC,KAAK,UAAUC,UAAWN,OCG3BO,EAVO,WAGrB,OACC,oCACC,kBAAC,EAAD,QCGiBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.561e14f9.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport Particles from 'react-tsparticles';\nimport { TransformWrapper, TransformComponent } from \"react-zoom-pan-pinch\";\n\nimport './SandTest1.scss';\n\ninterface Props {\n\ttitle?: string;\n\tchildren?: JSX.Element[] | JSX.Element | string;\n}\n\n\nexport const SandTest1 = ({ title, children }: Props) => {\n\tconst [inputMsg, setInputMsg] = useState<string>('');\n\tconst [msgs, setMsgs] = useState<string[]>(['這不是', '真正的', '文案']);\n\t// Language\n\tconsole.log('SandTest1 rendered');\n\n\tconst addMsg = () => {\n\t\tsetMsgs([\n\t\t\t...msgs,\n\t\t\tinputMsg,\n\t\t]);\n\t\tsetInputMsg('');\n\t}\n\n\tconst params = {\n\t\t\"background\": {\n\t\t\t\"color\": {\n\t\t\t\t\"value\": \"#323031\"\n\t\t\t},\n\t\t\t\"position\": \"50% 50%\",\n\t\t\t\"repeat\": \"no-repeat\",\n\t\t\t\"size\": \"cover\"\n\t\t},\n\t\t\"interactivity\": {\n\t\t\t\"events\": {\n\t\t\t\t\"onClick\": {\n\t\t\t\t\t\"enable\": true,\n\t\t\t\t\t\"mode\": \"push\"\n\t\t\t\t},\n\t\t\t\t\"onHover\": {\n\t\t\t\t  \"enable\": true,\n\t\t\t\t  \"mode\": \"repulse\",\n\t\t\t\t  \"parallax\": {\n\t\t\t\t\t\"force\": 60\n\t\t\t\t  }\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"modes\": {\n\t\t\t\t\"repulse\": {\n\t\t\t\t\t\"distance\": 50,\n\t\t\t\t\t\"duration\": 3,\n\t\t\t\t},\n\t\t\t\t\"grab\": {\n\t\t\t\t\t\"distance\": 50\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"particles\": {\n\t\t\t\"color\": {\n\t\t\t\t\"value\": \"#ffffff\"\n\t\t\t},\n\t\t\t\"number\": {\n\t\t\t\t\"density\": {\n\t\t\t\t\t\"enable\": true\n\t\t\t\t},\n\t\t\t\t\"value\": 300\n\t\t\t},\n\t\t\t\"opacity\": {\n\t\t\t\t\"animation\": {\n\t\t\t\t\t\"speed\": 1,\n\t\t\t\t\t\"minimumValue\": 0.1\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"shape\": {\n\t\t\t\t\"options\": {\n\t\t\t\t\t\"char\": {\n\t\t\t\t\t\t\"fill\": true,\n\t\t\t\t\t\t\"font\": \"Roboto\",\n\t\t\t\t\t\t\"style\": \"\",\n\t\t\t\t\t\t\"value\": (msgs.length > 0) ? msgs : ['字'],\n\t\t\t\t\t\t\"weight\": \"400\"\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t\"type\": \"char\"\n\t\t\t},\n\t\t\t\"size\": {\n\t\t\t\t\"value\": 10,\n\t\t\t\t\"animation\": {\n\t\t\t\t\t\"speed\": 40,\n\t\t\t\t\t\"minimumValue\": 0.1\n\t\t\t\t}\n\t\t\t},\n\t\t}\n\t};\n\n\treturn (\n\t\t<div\n\t\t\tclassName=\"sand-test\"\n\t\t>\n\t\t\t<h2>SAND TABLE TEST 1</h2>\n\t\t\t<div className=\"sand-board\">\n\t\t\t\t<TransformWrapper\n\t\t\t\t\tdefaultScale={1}\n\t\t\t\t\t// defaultPositionX={-960}\n\t\t\t\t\t// defaultPositionY={450}\n\t\t\t\t\toptions={{\n\t\t\t\t\t\tminScale: 1,\n\t\t\t\t\t\tmaxScale: 4,\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t{({ zoomIn, zoomOut, resetTransform, ...rest }: any) => (\n\t\t\t\t\t\t<React.Fragment>\n\t\t\t\t\t\t\t<div className=\"tools\">\n\t\t\t\t\t\t\t\t<button onClick={zoomIn}>+</button>\n\t\t\t\t\t\t\t\t<button onClick={zoomOut}>-</button>\n\t\t\t\t\t\t\t\t<button onClick={resetTransform}>x</button>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<TransformComponent>\n\t\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\t\tclassName=\"sand-board__zoomer\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\t\t\tclassName=\"sand-board__body\"\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<Particles\n\t\t\t\t\t\t\t\t\t\t\twidth=\"1920px\"\n\t\t\t\t\t\t\t\t\t\t\theight=\"1440px\"\n\t\t\t\t\t\t\t\t\t\t\tparams={params}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</TransformComponent>\n\t\t\t\t\t\t</React.Fragment>\n\t\t\t\t\t)}\n\t\t\t\t</TransformWrapper>\n\t\t\t</div>\n\t\t\t<div\n\t\t\t\tclassName=\"sand-msg\"\n\t\t\t>\n\t\t\t\t<p>\n\t\t\t\t\t{`${msgs.join('___')}...`}\n\t\t\t\t</p>\n\t\t\t\t<div\n\t\t\t\t\tclassName=\"sand-msg-input\"\n\t\t\t\t>\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tvalue={inputMsg}\n\t\t\t\t\t\tplaceholder=\"Leave you msg\"\n\t\t\t\t\t\tonChange={(e) => setInputMsg(e.target.value)}\n\t\t\t\t\t/>\n\t\t\t\t\t<button\n\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\tonClick={() => addMsg()}\n\t\t\t\t\t>\n\t\t\t\t\t\tSubmit\n\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default SandTest1;\n","import React, { useState, useEffect, useRef } from 'react';\nimport {\n\t// useParams,\n\tuseHistory,\n} from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\n\nimport './MainLayout.scss';\nimport Header from '../Header/Header';\nimport SideBar from '../SideBar/SideBar';\n\nimport SandTest1 from '../../components/SandTest1/SandTest1';\nimport SandTest2 from '../../components/SandTest2/SandTest2';\n\nexport const MainLayout = () => {\n\t// const { lang: paramLang } = useParams();\n\tconst { t } = useTranslation();\n\tconst history = useHistory();\n\treturn (\n\t\t<>\n\t\t\t<div className=\"main-layout\">\n\t\t\t\t<div className=\"main-layout__body\">\n\t\t\t\t\t<h1 className=\"a11y-hidden\">NWD50</h1>\n\t\t\t\t\t<main className=\"main-layout__content\">\n\t\t\t\t\t\t<SandTest1 />\n\t\t\t\t\t\t{/* <SandTest2 /> */}\n\t\t\t\t\t</main>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</>\n\t);\n};\n\n\nexport default MainLayout;\n","import React from 'react';\nimport {\n\tBrowserRouter as Router,\n\tSwitch,\n\tRoute,\n} from 'react-router-dom';\nimport MainLayout from '../layout/MainLayout/MainLayout';\n\nexport default () => (\n\t<Router>\n\t\t<Switch>\n\t\t\t<Route exact path=\"/:lang?\" component={MainLayout} />\n\t\t</Switch>\n\t</Router>\n);\n","\nimport React, { useEffect } from 'react';\nimport MainRouter from './router';\n\nconst App: React.FC = () => {\n\t// const { lang: paramLang } = useParams();\n\n\treturn (\n\t\t<>\n\t\t\t<MainRouter />\n\t\t</>\n\t);\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}