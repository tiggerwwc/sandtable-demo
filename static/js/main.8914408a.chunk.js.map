{"version":3,"sources":["components/SandTest1/SandTest1.tsx","layout/MainLayout/MainLayout.tsx","router/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["sandMasks","label","url","SandTest1","title","children","useState","inputMsg","setInputMsg","msgs","setMsgs","mask","setMask","console","log","params","background","color","value","position","repeat","size","interactivity","events","onClick","enable","mode","onHover","parallax","force","modes","repulse","distance","duration","grab","particles","number","density","arrangement","opacity","animation","speed","minimumValue","shape","options","char","fill","font","style","length","weight","type","polygon","inline","move","radius","scale","className","defaultScale","minScale","maxScale","zoomIn","zoomOut","resetTransform","width","height","join","placeholder","onChange","e","target","map","item","index","key","MainLayout","useTranslation","t","useHistory","exact","path","component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8914408a.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport Particles from 'react-tsparticles';\nimport { TransformWrapper, TransformComponent } from 'react-zoom-pan-pinch';\n\nimport './SandTest1.scss';\n\nconst sandMasks = [\n\t{\n\t\tlabel: 'No Mask',\n\t\turl: '',\n\t},\n\t{\n\t\tlabel: 'Deer',\n\t\turl: '/img/test-deer.svg',\n\t},\n\t{\n\t\tlabel: 'Circle',\n\t\turl: '/img/test-circle.svg',\n\t},\n\t{\n\t\tlabel: 'Sphere',\n\t\turl: '/img/sphere-grid.svg',\n\t},\n\t{\n\t\tlabel: 'TEST',\n\t\turl: '/img/test.svg',\n\t},\n];\ninterface Props {\n\ttitle?: string;\n\tchildren?: JSX.Element[] | JSX.Element | string;\n}\n\n\nexport const SandTest1 = ({ title, children }: Props) => {\n\tconst [inputMsg, setInputMsg] = useState<string>('');\n\tconst [msgs, setMsgs] = useState<string[]>(['這不是', '真正的', '文案']);\n\tconst [mask, setMask] = useState<string>('/img/test-circle.svg');\n\t// Language\n\tconsole.log('SandTest1 rendered');\n\n\tconst addMsg = () => {\n\t\tsetMsgs([\n\t\t\t...msgs,\n\t\t\tinputMsg,\n\t\t]);\n\t\tsetInputMsg('');\n\t};\n\n\tconst params: any = {\n\t\tbackground: {\n\t\t\tcolor: {\n\t\t\t\tvalue: '#323031',\n\t\t\t},\n\t\t\tposition: '50% 50%',\n\t\t\trepeat: 'no-repeat',\n\t\t\tsize: 'cover',\n\t\t},\n\t\tinteractivity: {\n\t\t\tevents: {\n\t\t\t\tonClick: {\n\t\t\t\t\tenable: true,\n\t\t\t\t\tmode: 'push',\n\t\t\t\t},\n\t\t\t\tonHover: {\n\t\t\t\t\tenable: true,\n\t\t\t\t\tmode: 'repulse',\n\t\t\t\t\tparallax: {\n\t\t\t\t\t\tforce: 60,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tmodes: {\n\t\t\t\trepulse: {\n\t\t\t\t\tdistance: 50,\n\t\t\t\t\tduration: 3,\n\t\t\t\t},\n\t\t\t\tgrab: {\n\t\t\t\t\tdistance: 50,\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\tparticles: {\n\t\t\tcolor: {\n\t\t\t\tvalue: '#ffffff',\n\t\t\t},\n\t\t\tnumber: {\n\t\t\t\tdensity: {\n\t\t\t\t\tenable: true,\n\t\t\t\t},\n\t\t\t\tarrangement: 'equidistant',\n\t\t\t\tvalue: 200,\n\t\t\t},\n\t\t\topacity: {\n\t\t\t\tanimation: {\n\t\t\t\t\tspeed: 1,\n\t\t\t\t\tminimumValue: 0.1,\n\t\t\t\t},\n\t\t\t},\n\t\t\tshape: {\n\t\t\t\toptions: {\n\t\t\t\t\tchar: {\n\t\t\t\t\t\tfill: true,\n\t\t\t\t\t\tfont: 'Roboto',\n\t\t\t\t\t\tstyle: '',\n\t\t\t\t\t\tvalue: (msgs.length > 0) ? msgs : ['字'],\n\t\t\t\t\t\tweight: '400',\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\ttype: 'char',\n\t\t\t},\n\t\t\tsize: {\n\t\t\t\tvalue: 10,\n\t\t\t\tanimation: {\n\t\t\t\t\tspeed: 40,\n\t\t\t\t\tminimumValue: 0.1,\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\tpolygon: {\n\t\t\t// draw: {\n\t\t\t// \tenable: !!mask,\n\t\t\t// \tstroke: {\n\t\t\t// \t\tcolor: {\n\t\t\t// \t\t\tvalue: 'rgba(255,255,255,0.2)',\n\t\t\t// \t\t},\n\t\t\t// \t\twidth: 0.5,\n\t\t\t// \t\topacity: 0.2,\n\t\t\t// \t},\n\t\t\t// },\n\t\t\tenable: !!mask,\n\t\t\tinline: {\n\t\t\t\tarrangement: '',\n\t\t\t},\n\t\t\tmove: {\n\t\t\t\tradius: 10,\n\t\t\t\ttype: 'path',\n\t\t\t},\n\t\t\tscale: 1.5,\n\t\t\ttype: 'inline',\n\t\t\turl: mask,\n\t\t},\n\t};\n\n\treturn (\n\t\t<div\n\t\t\tclassName=\"sand-test\"\n\t\t>\n\t\t\t<div\n\t\t\t\tclassName=\"sand-test__body\"\n\t\t\t>\n\t\t\t\t<div\n\t\t\t\t\tclassName=\"sand-test__board\"\n\t\t\t\t>\n\t\t\t\t\t<h2>SAND TABLE TEST 1</h2>\n\t\t\t\t\t<div className=\"sand-board\">\n\t\t\t\t\t\t<TransformWrapper\n\t\t\t\t\t\t\tdefaultScale={1}\n\t\t\t\t\t\t\t// defaultPositionX={-960}\n\t\t\t\t\t\t\t// defaultPositionY={450}\n\t\t\t\t\t\t\toptions={{\n\t\t\t\t\t\t\t\tminScale: 1,\n\t\t\t\t\t\t\t\tmaxScale: 4,\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{({\n\t\t\t\t\t\t\t\tzoomIn, zoomOut, resetTransform, ...rest\n\t\t\t\t\t\t\t}: any) => (\n\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t<TransformComponent>\n\t\t\t\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\t\t\t\tclassName=\"sand-board__zoomer\"\n\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"sand-board__body\"\n\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t<Particles\n\t\t\t\t\t\t\t\t\t\t\t\t\twidth=\"1920px\"\n\t\t\t\t\t\t\t\t\t\t\t\t\theight=\"1440px\"\n\t\t\t\t\t\t\t\t\t\t\t\t\tparams={params}\n\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</TransformComponent>\n\t\t\t\t\t\t\t\t\t<div className=\"tools\">\n\t\t\t\t\t\t\t\t\t\t<button type=\"button\" onClick={zoomIn}>+</button>\n\t\t\t\t\t\t\t\t\t\t<button type=\"button\" onClick={zoomOut}>-</button>\n\t\t\t\t\t\t\t\t\t\t<button type=\"button\" onClick={resetTransform}>x</button>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</TransformWrapper>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div\n\t\t\t\t\tclassName=\"sand-test__control\"\n\t\t\t\t>\n\t\t\t\t\t<div\n\t\t\t\t\t\tclassName=\"sand-msg\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<h3>Messages</h3>\n\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t{`${msgs.join('___')}...`}\n\t\t\t\t\t\t</p>\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tclassName=\"sand-msg-input\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\t\tvalue={inputMsg}\n\t\t\t\t\t\t\t\tplaceholder=\"Leave you msg\"\n\t\t\t\t\t\t\t\tonChange={(e) => setInputMsg(e.target.value)}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\t\tonClick={() => addMsg()}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tSubmit\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div\n\t\t\t\t\t\tclassName=\"sand-mask\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<h3>Mask</h3>\n\t\t\t\t\t\t<select\n\t\t\t\t\t\t\tonChange={(e) => setMask(e.target.value)}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tsandMasks.map((item: any, index: number) => {\n\t\t\t\t\t\t\t\t\tconst key = `mask-${index}`;\n\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t<option\n\t\t\t\t\t\t\t\t\t\t\tvalue={item.url}\n\t\t\t\t\t\t\t\t\t\t\tkey={key}\n\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t{item.label}\n\t\t\t\t\t\t\t\t\t\t</option>\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t</select>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default SandTest1;\n","import React, { useState, useEffect, useRef } from 'react';\nimport {\n\t// useParams,\n\tuseHistory,\n} from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\n\nimport './MainLayout.scss';\nimport Header from '../Header/Header';\nimport SideBar from '../SideBar/SideBar';\n\nimport SandTest1 from '../../components/SandTest1/SandTest1';\nimport SandTest2 from '../../components/SandTest2/SandTest2';\n\nexport const MainLayout = () => {\n\t// const { lang: paramLang } = useParams();\n\tconst { t } = useTranslation();\n\tconst history = useHistory();\n\treturn (\n\t\t<>\n\t\t\t<div className=\"main-layout\">\n\t\t\t\t<div className=\"main-layout__body\">\n\t\t\t\t\t<h1 className=\"a11y-hidden\">NWD50</h1>\n\t\t\t\t\t<main className=\"main-layout__content\">\n\t\t\t\t\t\t<SandTest1 />\n\t\t\t\t\t\t{/* <SandTest2 /> */}\n\t\t\t\t\t</main>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</>\n\t);\n};\n\n\nexport default MainLayout;\n","import React from 'react';\nimport {\n\tBrowserRouter as Router,\n\tSwitch,\n\tRoute,\n} from 'react-router-dom';\nimport MainLayout from '../layout/MainLayout/MainLayout';\n\nexport default () => (\n\t<Router>\n\t\t<Switch>\n\t\t\t<Route exact path=\"/:lang?\" component={MainLayout} />\n\t\t</Switch>\n\t</Router>\n);\n","\nimport React, { useEffect } from 'react';\nimport MainRouter from './router';\n\nconst App: React.FC = () => {\n\t// const { lang: paramLang } = useParams();\n\n\treturn (\n\t\t<>\n\t\t\t<MainRouter />\n\t\t</>\n\t);\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}